.container {
  display: grid;
  /*
    this is the default value, which means that if not rows/columns are specified
    the grid will have a single column and as many rows as children
  */
  grid-auto-flow: row;
  /*
  it can be changed to row, which means that if not rows/columns are specified
  the grid will have a single row and as many columns as children
  */
  grid-auto-flow: column;
}

.container {
  display: grid;

  /*
    2 columns defined with hard limits: the 1st one will use 30% of the available space
  */
  grid-template-columns: 30% 70%;

  /*
    2 columns defined with soft limits: the 1st one will use 3/10th of the available space
    unless its content needs more space, in that case it'll use more
  */
  grid-template-columns: 3fr 7fr;

  /*
    3 columns, the first will occupy 500px, and the remaining space, 500px, will be divided
    in 1fr + 4fr = 5fr, meaning each fr unit will be 100px, so the 2nd column will be 100px
    and the 3rd one 400px
  */
  width: 1000px;
  grid-template-columns: 500px 1fr 4fr;
}

.container {
  display: grid;
  /* 3 rows */
  grid-template-rows: 300px 1fr 300px;
}

.container {
  display: grid;

  grid-template-columns: 20rem 1fr;
  grid-template-rows: 200px 1fr 150px;

  gap: 2rem;
}

.container {
  display: grid;

  /* repeat function */
  grid-template-columns: 400px repeat(5, 1fr) 150px;

  /* define the default height of new rows */
  grid-auto-rows: 100px;
}

/**
  justify-content applies to the grid structure, changing the columns.
*/
.container {
  display: grid;

  /* default */
  justify-content: stretch;

  /* align all columns to the start*/
  justify-content: start;

  /* align all columns to the end */
  justify-content: end;

  /* align all columns to the center */
  justify-content: center;

  /* align all columns with the space between them */
  justify-content: space-between;

  /* align all columns with the space around them */
  justify-content: space-around;

  /* align all columns with the space evenly distributed between them */
  justify-content: space-evenly;
}

/**
  justify-items applies to the child elements, without affecting the shape of the grid.
*/
.container {
  display: grid;

  /* default, stretches horizontally the item inside the cell to use the whole width of the cell */
  justify-items: stretch;

  /* align horizontally the item inside the cell to the start */
  justify-items: start;

  /* align horizontally the item inside the cell to the end */
  justify-items: end;

  /* align horizontally the item inside the cell to the center */
  justify-items: center;
}

/**
  align-content is just like justify-content, but for the rows
*/
.container {
  display: grid;

  /* default, makes the rows as tall as available space there is in the grid for each row */
  align-content: stretch;

  /* brings all the rows to the center of the grid */
  align-content: center;

  /* brings all the rows to the start of the grid */
  align-content: start;

  /* brings all the rows to the end of the grid */
  align-content: end;

  /* align all rows with the space between them */
  align-content: space-between;

  /* align all rows with the space around them */
  align-content: space-around;

  /* align all rows with the space evenly distributed between them */
  align-content: space-evenly;
}

/**
  align-items is just like justify-items, but for the rows
*/
.container {
  display: grid;

  /* default, stretches vertically the item inside the cell to use the whole height of the cell */
  align-items: stretch;

  /* align vertically the item inside the cell to the start */
  align-items: start;

  /* align vertically the item inside the cell to the end */
  align-items: end;

  /* align vertically the item inside the cell to the center */
  align-items: center;
}

/* 
  justify-self and align-self are just like justify-items and align-items, but for a single element inside a grid
 */
.some-element-inside-a-grid {
  justify-self: end;
  align-self: center;
}

.container {
  display: grid;

  grid-template-areas:
    "hero   hero   hero  "
    "menu   main   ads   "
    "menu   main   ads   "
    "footer footer footer";

  & > header {
    grid-area: hero;
  }

  & > nav {
    grid-area: menu;
  }

  & > main {
    grid-area: main;
  }

  & > aside {
    grid-area: ads;
  }

  & > footer {
    grid-area: footer;
  }
}