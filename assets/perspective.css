/* in this example, each .child will be rotated based on the same shared perspective environment created .parent */
.parent {
  perspective: 'distance from user';

  .child {
    transform: rotateX('angle');
  }
}

/* and in this example, the perspective is applied using a transform function directly to the element */
.element {
  transform: perspective('distance from user') rotateX('angle');
}

/* 
  with the property transform-style we can change the stacking algorithm to, instead of using z-index,
  use the z-axis of the 3D environment
 */
.parent {
  perspective: 400px;
  transform-style: preserve-3d;
}
